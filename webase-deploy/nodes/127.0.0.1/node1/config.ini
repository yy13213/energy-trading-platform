[p2p]
    listen_ip=0.0.0.0
    listen_port=30301
    ; ssl or sm ssl
    sm_ssl=false
    nodes_path=./
    nodes_file=nodes.json
    ; enable rip protocol, default: true
    ; enable_rip_protocol=false
    ; enable compression for p2p message, default: true
    ; enable_compression=false

[certificate_blacklist]
    ; crl.0 should be nodeid, nodeid's length is 512
    ;crl.0=

[certificate_whitelist]
    ; cal.0 should be nodeid, nodeid's length is 512
    ;cal.0=

[rpc]
    listen_ip=0.0.0.0
    listen_port=20201
    thread_count=4
    ; ssl or sm ssl
    sm_ssl=false
    ; ssl connection switch, if disable the ssl connection, default: false
    ;disable_ssl=true
    ; return input params in sendTransaction() return, default: true
    ; return_input_params=false

[web3_rpc]
    enable=false
    listen_ip=0.0.0.0
    listen_port=8545
    thread_count=8

[cert]
    ; directory the certificates located in
    ca_path=./conf
    ; the ca certificate file
    ca_cert=ca.crt
    ; the node private key file
    node_key=ssl.key
    ; the node certificate file
    node_cert=ssl.crt
    ; directory the multiple certificates located in
    multi_ca_path=multiCaPath


[security]
    private_key_path=conf/node.pem
    enable_hsm=false
    ; path of hsm dynamic library
    ;hsm_lib_path=
    ;key_index=
    ;password=

[storage_security]
    ; enable data disk encryption or not, default is false
    enable=false
    ; url of the key center, in format of ip:port
    ;key_center_url=
    ;cipher_data_key=

[consensus]
    ; min block generation time(ms)
    min_seal_time=500

[executor]
    enable_dag=true
    baseline_scheduler=false
    baseline_scheduler_parallel=false

[storage]
    data_path=data
    enable_cache=true
    ; The granularity of the storage page, in bytes, must not be less than 4096 Bytes, the default is 10240 Bytes (10KB)
    ; if modify key_page_size value to 0, should clear the data directory
    key_page_size=10240
    pd_ssl_ca_path=
    pd_ssl_cert_path=
    pd_ssl_key_path=
    enable_archive=false
    archive_ip=127.0.0.1
    archive_port=
    ; if modify enable_separate_block_state, should clear the data directory
    ;enable_separate_block_state=false
    ;sync_archived_blocks=false

[txpool]
    ; size of the txpool, default is 15000
    limit=15000
    ; txs notification threads num, default is 2
    notify_worker_num=2
    ; txs verification threads num, default is the number of CPU cores
    ;verify_worker_num=2
    ; txs expiration time, in seconds, default is 10 minutes
    txs_expiration_time = 600

[sync]
    ; send transaction by tree-topology
    ; recommend to use when deploy many consensus nodes
    send_txs_by_tree=false
    ; send block status by tree-topology
    ; recommend to use when deploy many consensus nodes
    sync_block_by_tree=false
    tree_width=3

[redis]
    ; redis server ip
    ;server_ip=127.0.0.1
    ; redis server port
    ;server_port=6379
    ; redis request timeout, unit ms
    ;request_timeout=3000
    ; redis connection pool size
    ;connection_pool_size=16
    ; redis password, default empty
    ;password=
    ; redis db, default 0th
    ;db=0

[flow_control]
    ; rate limiter stat reporter interval, unit: ms
    ; stat_reporter_interval=60000

    ; time window for rate limiter, default: 3s
    ; time_window_sec=3

    ; enable distributed rate limiter, redis required, default: false
    ; enable_distributed_ratelimit=false
    ; enable local cache for distributed rate limiter, work with enable_distributed_ratelimit, default: true
    ; enable_distributed_ratelimit_cache=true
    ; distributed rate limiter local cache percent, work with enable_distributed_ratelimit_cache, default: 20
    ; distributed_ratelimit_cache_percent=20

    ; the module that does not limit bandwidth
    ; list of all modules: raft,pbft,amop,block_sync,txs_sync,light_node,cons_txs_sync
    ;
    ; modules_without_bw_limit=raft,pbft

    ; allow the msg exceed max permit pass
    ; outgoing_allow_exceed_max_permit=false

    ; restrict the outgoing bandwidth of the node
    ; both integer and decimal is support, unit: Mb
    ;
    ; total_outgoing_bw_limit=10

    ; restrict the outgoing bandwidth of the the connection
    ; both integer and decimal is support, unit: Mb
    ;
    ; conn_outgoing_bw_limit=2
    ;
    ; specify IP to limit bandwidth, format: conn_outgoing_bw_limit_x.x.x.x=n
    ;   conn_outgoing_bw_limit_192.108.0.1=3
    ;   conn_outgoing_bw_limit_192.108.0.2=3
    ;   conn_outgoing_bw_limit_192.108.0.3=3
    ;
    ; default bandwidth limit for the group
    ; group_outgoing_bw_limit=2
    ;
    ; specify group to limit bandwidth, group_outgoing_bw_limit_groupName=n
    ;   group_outgoing_bw_limit_group0=2
    ;   group_outgoing_bw_limit_group1=2
    ;   group_outgoing_bw_limit_group2=2

    ; should not change incoming_p2p_basic_msg_type_list if you known what you would to do
    ; incoming_p2p_basic_msg_type_list=
    ; the qps limit for p2p basic msg type, the msg type has been config by incoming_p2p_basic_msg_type_list, default: -1
    ; incoming_p2p_basic_msg_type_qps_limit=-1
    ; default qps limit for all module message, default: -1
    ; incoming_module_msg_type_qps_limit=-1
    ; specify module to limit qps, incoming_module_qps_limit_moduleID=n
    ;       incoming_module_qps_limit_xxxx=1000
    ;       incoming_module_qps_limit_xxxx=2000
    ;       incoming_module_qps_limit_xxxx=3000

[log]
    enable=true
    ; print the log to std::cout or not, default print to the log files
    enable_console_output = false
    log_path=./log
    ; info debug trace
    level=info
    ; MB
    max_log_file_size=1024
    ; rotate the log every hour
    ;enable_rotate_by_hour=true
    enable_rate_collector=false
